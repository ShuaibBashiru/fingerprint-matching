from django.http import HttpResponse, JsonResponse
from django.core.files.storage import FileSystemStorage
import pandas as pd
import os
import time
import json
import sys
import random
import datetime
import numpy as np
from django.db import connection, transaction
from upload.user_account_model import AddUserAccount
from authentication.writer import write_error
from authentication.query_columns import dictfetchall
import mimetypes
import tensorflow as tf
from tensorflow.keras.models import model_from_json, load_model
import imagehash
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import io
import base64

current_file = 'Testing'


def tests():
    try:
        with connection.cursor() as cursor:
            counter = cursor.execute("SELECT * FROM enroll")
            row = dictfetchall(cursor)
            arr = [71, 70, 71, 105, 115, 32, 97, 32, 32, 67, 83, 32, 80, 32, 80, 111, 114, 116, 97, 108]
            data1 = b'0x00F85A01C82AE3735CC0413709AB71F0F7145592A22123F88C1E37D4E7459D1DD76FDF8E615D70151A74B640D3A6419D836AFA435BA97B438222F68E06D8434C2A2AFAC449E9B9A0F7D519B102E815F45CC0DFC0AF4227EFA954FDB62BB0B13797FD32F30C232A674E940FA1948413E32167678C3ABEB21C8B9EEB0929FF33B7E7B68AD92480B53B26DBDBEC697BEBEBA41AD74D639B23034C0D7BD868F29558EF0958C63F834A40EBFB215428D34A1315F440668A684354A48B1CA41E30FEFBF80B700530872089CCA8087693B99802DD461B0F3CD38EAA4CDCB8E5C8C96811F5C45BABE8B3EF632172BEA94969D975CD295A458FEE8AA16920D6C14D2A13F37F21C8F674A650A1EFF46E16DEBF70B63939B5F2E1A1C2A5222BFE1139DFB3C1F770987C875A3851A0D131D3CAE162D575D7B7C03A646E93849809C52591B82D9A25D556ED7B5874FEB8E3944793540542BA6DCEC9E514CE9989FF98A37C6F00F86801C82AE3735CC0413709AB713082145592047A902EDCB2EF34F6A5A55F653DD35119A5EA2A3EE55589674AAB4D51DB70E85642E00DF9651079009AA0BEC1A9E4D7B6BE1071807F61FF18BDD41B01E3C9363773A07386859EA682D748B2459C294313C2F715C5B2ABC8F4CCFC52C801ECC2E4AB0BEE1CECAE696A546F146B3E54CF6755D21719723A1CAFE25983A2F70001BD70D979323EBD930CC16D08FAAF00412481F2407AB8608A43EB5F8630D69001B2D230EAF7F073A2DFD90FD3F227704BF1B9E2FB020203E525FF008CA7F01AC61A99DD1E97EEF1B7285E0DBC353A8FCD0F670C20A648E13E34777180270312ED7C42D2796C96F9473ACDDE30A2EAF74F67D72F99CA13A3535D4F31E23DD67F5C6E4DC3036DE017B1B59C6E53AB02334ACFBAE9DBC96F0D2AE593AC1DB4A8FCB09B312F95891C699546092EF022CAFCE8CDD9C9BC5C5BFE0839C67E678483C6A36699FC8A76A154666A626B5BB541D2EB9C82263928E6DA046F00F87601C82AE3735CC0413709AB7130FF145592BA57D805A61D95215D75FBCD9B8D2415A272BE6CDB51CB61BA61C04FAE6FD3853243A21A8F2924943B86922F275BD4004CE712B5E819B20EBF9DDE281B661806C9E5B73BB62FB2D9C7DE2C0031654E3CAB9574E58E0F59C2B303375DF841169F86907DE6A1D1843DAFFBFFE67545A4DE95C82F07B69F339A21313BDCBB689FCBFA973A3C3F463CE398B91F11734FB7C487F5EDEDA03902215D267C8631FFB9DD56747DC2747F8E8F3B48E9E557978184E19FB8AD01F289C0CEC61A9D1555230B24A8B769A9FBCC7790630CFD71ECF5746F5AD4B13AD0E512E6997E69BE7A0137A4A4F77E6E60D5C20BB9F69A4B9D3454F18EBCBE044ADCCC6A510D9CDAF4EDF6476CD0B159B6CB8C021F96DA3A30C68B353E846B3C0703D00DB06CCC76DA52CCE8EC95016EF76487513540C7D95761EEC29019D8C92580046CC5338311F7A56FBD2205DD6457FF587D62A671B990C6B7B0BD0E4B42076ADA226211D3E908B87318D89517C3866F00E87F01C82AE3735CC0413709AB71B0E114559279F8621D030A8B1ED2DB0EAF007597364969E9450AA7D950174B86F7968803ECCC62F3ABB102991660D2AEDE3E49D35A65E8764206508BE9AE9FA500FC5F47E74E6194160529384BCD53BC9359A78D579DF23A91E724EDE4F202063A409BB19512B473DAF7D9B5CE3C3F9DFDB03753E71E2CED173B17E208468011AE962CF1A815CD51637769916FEFD5B838F54CBB62482B7A47D8FE74F555C2D690FF0228F650602C4AC98062140679BC9A7B19EC197AD00FB48752E7314B2BDDA1274E7BAC170956C1C76286EA789A221ED0CBA1787B476DC423ACC85099C1215EC73E82A5998E03797B1BD3BA1A0EDB47CCDB5D9D1F5A8B42A2EE5949CE1D20FE94C3CECBB663E3E9F2E4637469EC51CC33EF9CB3999D8A6B02C19BA1F6E29E43F28B4DC273C17FD42D7766DA12CDEF576365C083ABA22039C568750866316552E1527A920CA8E544E4A1A64BD8E163C5C32C47745F8DD7D7527506776AB1C5A64D965185CAA44E2D67D308ECC0D7000FEAA0FA6F0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
            data = b'00f88001c82ae3735cc0413709ab71b0b71455924635a401bac5a99439ccd0e275c83d29f9581c94c643dabef50cacde054d04981fbd2b62463ff3d7ca099fe495cafb10110db6c72dfac7ca03ef1e98577ae084af1b98e8f21fd497f521bca1e39924a3b5a9874bc41f7509e0269e655ac7de18195ddd8c9020710a9e32e55ffa73a65081323a5d944401faa74022af3cd489d36bbf2a49c74cff385e8bcf04062ea975e77aa08a16ccb8be4bbaef5dcf9732b85a60d9272cdc63ca8c7b92225e25ecdf68a33882b1429c3939d94461bb7ef027dc9ec66428e9cb35a487fa0dfde1e50fadeab3a82851ae0c7dbfbef9b0257483928f7d8eb5a16591e6aee1'
            # newimg = Image.frombytes('L', (20, 20), data, 'raw')
            # print(list(data))
            arrimg = Image.fromarray(arr, 'raw')
            arrimg.show()
            if counter > 0:
                feedback = {
                    'status': 'success',
                    'statusmsg': 'success',
                    'msg': '',
                    # 'result': row[0],
                    'classname': '',
                }
            else:
                feedback = {
                    'status': 'failed',
                    'statusmsg': 'error',
                    'msg': 'Something went wrong or this record no longer exist. '
                           'Kindly confirm this update and try again.',
                    'classname': 'alert-danger p-2',
                }
    except Exception as e:
        write_error(current_file, e)
        feedback = {
            'status': 'failed',
            'statusmsg': 'error',
            'msg': 'Something went wrong!, please refresh or contact our support for further assistance.',
            'classname': 'alert-danger p-2',
        }
    # print(feedback)
    return JsonResponse(feedback, safe=False)

# tests()